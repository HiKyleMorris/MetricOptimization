{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww21000\viewh11340\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Just so I keep track of what I\'92ve done here\'85I\'92ve implemented a number of versions of Haugazeaus method:\
\
Haugazeaus.jl:\
\
	* There are M maps, one for each projection. This is super slow, both in terms of per iteration count as well as needing a large number of iterations. Converges on Karate, so it works, but it\'92s crap, apart from the fact that it has a 1/k convergence and doesn\'92t need O(n^3) memory.\
\
\
Haugazeaus2.jl:\
\
	* There\'92s a single map: a composition of all the projections once through (that\'92s the map T) and then at the end we do the Haugazeau\'92s correction steps to make sure we stay on track. Better than Haugazeaus.jl, but this one doesn\'92t have a convergence rate guarantee even though it\'92s guaranteed to eventually converge strongly. Still isn\'92t at all competitive with just using Dykstra\'92s method.\
\
\
Haugazeaus3.jl\
\
	* Alternate between two maps: the triangle constraints and non-triangle constraints.\
	* Slower than Haugazeaus 2, but still converges for small problems (about as well as Haugazeaus does)\
\
Haugazeaus4.jl\
\
	* Alternate, as well as perform the acceleration step.\
	* Step up from Haugazeaus 2 and 3 I think maybe, but not that good. Not competitive with 	Bauschke.\
\
\
Conclusion: don\'92t bother using Haugazeaus. Bauschke\'92s method is better.}