{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh9880\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Dykstra_TFA.jl:\
\
	* First iteration. Decent, but no bells and whistles\
\
Dykstra_TFA2.jl\
\
	* Unrolled the triple loop. Works better\
\
Dykstra_TFA3.jl\
\
	* ijkKey\'97slightly slower, but less storage, so overall improvement I\'92d say as a method.\
\
Dykstra_TFA4.jl\
\
	* D is now Float64, it\'92s faster\
\
Dykstra_TFA_Dict:\
\
	* Exact same as TFA4, but uses a dictionary. Much slower, but gives comparison between the two data structures as clearly as possible, in case in the future we will continue to explore randomized methods.\
\
	roughly a factor 10 slower\
\
	n = 700: .6-.7 seconds goes to 7-8 seconds\
	n = 1000: 1.7-2 seconds goes to 20ish seconds\
	n = 1500: 5.6-6.0 seconds to just over a minute (64-65 in first two iterations)}